<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | Daniels Cai's Blog]]></title>
  <link href="http://danielscai.github.com/blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://danielscai.github.com/"/>
  <updated>2013-04-15T09:12:23+08:00</updated>
  <id>http://danielscai.github.com/</id>
  <author>
    <name><![CDATA[Daniels Cai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git版本控制下，配置puppet多环境]]></title>
    <link href="http://danielscai.github.com/blog/2013/04/15/puppet-multi-environment/"/>
    <updated>2013-04-15T09:08:00+08:00</updated>
    <id>http://danielscai.github.com/blog/2013/04/15/puppet-multi-environment</id>
    <content type="html"><![CDATA[<p>本文档主要讨论在实际环境下的puppet多环境配置，并使用git作为版本控制。</p>

<p>配置多环境主要目的在于</p>

<ul>
<li>隔离生产环境和测试开发环境</li>
<li>提供多个开发者独立环境</li>
</ul>


<h1>0. 配置puppet多环境</h1>

<p>详细配置puppet多环境请参考puppet官方文档
http://docs.puppetlabs.com/guides/environment.html
我们这里件4个环境production ,test,dev_a和dev_b
<code>/etc/puppet/puppet.conf</code> 配置如下
<code>
[production]
modulepath = $confdir/env/production/modules
manifest = $confdir/env/production/manifests/site.pp
[test]
modulepath = $confdir/env/test/modules
manifest = $confdir/env/test/manifests/site.pp
[dev_a]
modulepath = $confdir/env/dev_a/modules
manifest = $confdir/env/dev_a/manifests/site.pp
[dev_b]
modulepath = $confdir/env/dev_b/modules
manifest = $confdir/env/dev_b/manifests/site.pp
</code></p>

<!-- more -->


<h1>1.建立git仓库</h1>

<h2>1.1 建立两个git仓库</h2>

<p>一个用来管理puppet中的modules，一个用来管理除了modules以外的所有内容
我们将仓库称为 puppet 和modules , 其中modules 作为puppet 的一个子模块，子模块可以参考http://gitbook.liuhui998.com/5_10.html</p>

<p>仓库可以建立在github或者任意你喜欢的git托管仓库上，这里我们建两个本地仓库作为演示,
注意，如果是不是使用的本地仓库，请在commit后<code>git push</code>到server上
<code>
cd /tmp
mkdir puppet modules
</code></p>

<h2>1.2 初始化两个仓库</h2>

<p>初始化仓库，并将modules作为子模块添加到 puppet仓库中,此模块作为默认环境，也就是production环境的modules文件</p>

<p><code>
cd modules ; git init ; cd ..
cd puppet ; git init
git submodule add ../modules env/production/modules
</code></p>

<h2>1.3添加排除文件</h2>

<p>因为使用了modules子模块，因此我们需要将env/*/modules排除在puppet仓库的控制外，这样多个开发者就可以在各自的环境下开发而不影响当前puppet仓库
但是我们的env/production/modules是一个子模块，仍然是需要控制的，因此我们将<code>.gitignore</code>设置为
<code>
env/*/modules
!env/production/modules
</code></p>

<h1>2. 管理puppet配置文件</h1>

<h2>2.1 将现有环境中的puppet配置文件copy到puppet仓库下</h2>

<p><code>
cp -r /etc/puppet/* ./
git add .
git commit -m 'init'
</code></p>

<h2>2.2 管理modules</h2>

<p><code>
cd ../modules/
cp -r /etc/puppet/env/production/modules/* ./
git add .
git commit -m 'add modules'
</code></p>

<h1>3. 更新子模块</h1>

<p><code>
cd ..
git submodule update
</code></p>

<h1>4.多开发者共同开发</h1>

<p>开发者在各自的分支中开发，将测试好的代码<code>merge</code>到主干分支
下面演示一个开发者(dev_a)建立自己的开发环境</p>

<h2>4.1 拷贝<code>manifest</code></h2>

<p><code>
cd /tmp/puppet/env/dev_a
cp -r ../production/manifests ./
</code></p>

<h2>4.2 建立modules分支</h2>

<p><code>
git clone ../production/modules modules
cd modules/
git checkout -b dev_a
</code></p>

<h2>4.3 将开发版本合并到主干</h2>

<p>开发者将完成开发任务并测试后将代码合并到主干分支，如果有测试团队，将代码先合并到测试团队分支是一个好主意，这里就直接合并到主干分支(<code>master</code>分支)上
<code>
touch 1
git add 1
git commit -m 'complete task 1 '
</code>
到目前为止开发都在dev_a分支上，当完成测试后，合并到主干
<code>
git checkout master
git merge dev_a --no-ff
git push origin master
</code>
对于为何使用<code>--no-ff</code>参数，可以参考http://www.ruanyifeng.com/blog/2012/07/git.html</p>

<p>在prodution环境签出最新代码
<code>
cd ../../production/modules/
git pull origin master
</code></p>

<ol>
<li>部署新的puppet环境
将仓库中的puppet配置部署到新的环境中
在新的环境中安装好<code>puppet</code>，将配置文件备份到其他目录，签出puppet代码和其子模块的代码
以<code>ubuntu 12.04 precise</code>为例,将 <code>/tmp/puppet</code>替换成你真实的git仓库地址</li>
</ol>


<p>```
wget http://apt.puppetlabs.com/puppetlabs-release-precise.deb
dpkg -i puppetlabs-release-precise.deb
apt-get update
apt-get upgrade</p>

<p>apt-get install puppetmaster
mv /etc/puppet /etc/puppet.old
cd /etc/</p>

<p>git clone /tmp/puppet puppet
git submodule init
git submodule update
```</p>
]]></content>
  </entry>
  
</feed>
