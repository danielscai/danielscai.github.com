<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: git | Daniels Cai's Blog]]></title>
  <link href="http://danielscai.github.com/blog/categories/git/atom.xml" rel="self"/>
  <link href="http://danielscai.github.com/"/>
  <updated>2014-11-01T20:47:48-07:00</updated>
  <id>http://danielscai.github.com/</id>
  <author>
    <name><![CDATA[Daniels Cai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[git 多开发者协作模式]]></title>
    <link href="http://danielscai.github.com/blog/2013/04/23/git-multi-developer/"/>
    <updated>2013-04-23T14:35:00-07:00</updated>
    <id>http://danielscai.github.com/blog/2013/04/23/git-multi-developer</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/main/Git-Logo-1788C.png" width="350" height="350" title="git" alt="git">
在多开发者共同开发一个项目时，git 的多分支可以帮助多个开发者在各自环境下开发而不影响到团队其他人员。</p>

<p>下面是多个开发者在各自环境下工作时用到的一些命令</p>

<!-- more -->


<p></p>

<h2>1. 创建分支</h2>

<p>每个开发者需要有一个自己的分支，比如一个新的开发人员加入项目中，可能需要用到下面的命令创建分支</p>

<p><strong>克隆新代码</strong></p>

<pre><code>git clone git_repo_path project_dir 
</code></pre>

<p><strong>创建一个本地分支</strong></p>

<p>我们创建一个名叫 <code>dcai</code>的分支</p>

<pre><code>cd project_dir
git checkout -b dcai
</code></pre>

<p><strong>将本地分支提交到远程分支</strong></p>

<pre><code>git push origin dcai 
</code></pre>

<p>至此，一个新的分支在远程和本地就创建好了</p>

<p><strong>列出所有分支</strong></p>

<pre><code># git branch -a 
* dcai
  master
  remotes/origin/HEAD -&gt; origin/master
  remotes/origin/dcai
  remotes/origin/master
</code></pre>

<h2>2.在分支上工作</h2>

<p>在本地<code>dcai</code>分支上做出改动并测试通过后，将本次改动<code>commit</code>到远程<code>dcai</code>分支上</p>

<p><strong>查看本次修改</strong></p>

<p>我在文件底部测试性的加了一个空行</p>

<pre><code># git diff 
diff --git a/manage.py b/manage.py
index f087353..e2d695f 100755
--- a/manage.py
+++ b/manage.py
@@ -14,3 +14,4 @@ if __name__ == "__main__":
     manager.run()
     #app.run(host='0.0.0.0',port=8088)

+
</code></pre>

<p><strong>提交改动，并push到git远程仓库中</strong></p>

<pre><code>git add manage.py
git commit -m 'test, add a new line'
git push origin dcai
</code></pre>

<h2>3. 合并到主干</h2>

<p>当你确定自己分支上的代码已经没有问题的时候，可以将代码合并到主干，就是<code>master</code>分支上 ，你需要做如下几个步骤</p>

<p><strong>切换到主干分支</strong></p>

<pre><code>git checkout master
</code></pre>

<p><strong>合并你的分支到主干</strong></p>

<pre><code>git merge dcai --no-ff
</code></pre>

<p>合并的时候如果有冲突，需要自己手动解决冲突。
最后将合并结果<code>push</code>到远程git仓库中</p>

<pre><code>git push origin master
</code></pre>

<p><strong>最后不要忘记切换到自己的分支上，继续工作</strong></p>

<pre><code>git checkout dcai
</code></pre>
]]></content>
  </entry>
  
</feed>
